// 'skeleton' DAO from ethereum whitepaper
// There are three transaction types:
//     [0,k] to register a vote in favor of a code change
//     [1,k,L,v0,v1,...,vN] to register a code change at code k in favor of setting memory starting from location L to v0, v1 ... vn
//     [2,k] to finalize a given code change

// contract.storage[2^255] = number of members
// membership is stored with a 1 at contract.storage[memberAddress]
// value C should be replaced with the contract creator's address in order to add him as the DAO's first member;
//   from there, it will be C's responsibility to use the democratic code change protocol to add a few other members and code to bootstrap the organization.

// if the transaction fee isn't enough for the contract to run, stop
if tx.value < tx.basefee * 200:
    stop
//if the sender isn't a member of the organization, stop
if contract.storage[tx.sender] == 0:
    stop
// create unique key for a given code change
k = sha3(32,tx.data[1])
// if this is a 'vote' transaction
if tx.data[0] == 0:
    // if the sender has not voted yet, add his vote to this code change's total, and mark sender as voted
    if contract.storage[k + tx.sender] == 0:
        contract.storage[k + tx.sender] = 1
        contract.storage[k] += 1
// if this is a 'register new code' transaction
else if tx.data[0] == 1:
    // if the transaction fee can't cover adding the 'new code' or code already exists for this entry, stop
    if tx.value <= tx.datan * block.basefee * 200 or contract.storage[k]:
        stop
    i = 2
    // for each line of 'new code', add it to the contract
    while i < tx.datan:
        contract.storage[k + i] = tx.data[i]
        i = i + 1
    // mark that code exists at this entry and note how many lines of code there are
    contract.storage[k] = 1
    contract.storage[k+1] = tx.datan
// if this is a 'finalize code change' transaction
else if tx.data[0] == 2:
    // if at least 2/3 of the organization members have voted on the code change
    if contract.storage[k] >= contract.storage[2 ^ 255] * 2 / 3:
        // if the transaction fee can't cover copying all lines of code to be copied, stop
        if tx.value <= tx.datan * block.basefee * 200:  // I believe this line should read: if tx.value <= contract.storage[k+1] * block.basefee * 200:
            stop
        i = 3
        // set total lines of code and code location to copy to variables
        L = contract.storage[k+1]
        loc = contract.storage[k+2]
        // copy code changes into place, line by line
        while i < L:
            contract.storage[loc+i-3] = tx.data[i]
            i = i + 1
// if the contract isn't initialized, initialize it, and set address C as a member
if contract.storage[2 ^ 255 + 1] == 0:
    contract.storage[2 ^ 255 + 1] = 1
    contract.storage[C] = 1
